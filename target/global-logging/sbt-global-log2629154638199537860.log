[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\giancarlo.scattolin\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\giancarlo.scattolin\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 11.0.13)
[debug]       Load.loadUnit: plugins took 79.207ms
[debug]       Load.loadUnit: defsScala took 0.1861ms
[debug] [Loading] Scanning directory C:\Users\giancarlo.scattolin\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\giancarlo.scattolin\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.8895 ms
[debug]           Load.resolveProject(global-plugins) took 33.0195ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\giancarlo.scattolin\.sbt\1.0\plugins, plugins: List(<none>))) took 64.1474ms
[debug] [Loading] Done in C:\Users\giancarlo.scattolin\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 78.8263ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1689ms
[debug]     Load.loadUnit(file:/C:/Users/giancarlo.scattolin/.sbt/1.0/plugins/, ...) took 165.0463ms
[debug]   Load.apply: load took 296.3695ms
[debug]   Load.apply: resolveProjects took 6.2502ms
[debug]   Load.apply: finalTransforms took 45.7552ms
[debug]   Load.apply: config.delegates took 4.9297ms
[debug]   Load.apply: Def.make(settings)... took 305.847ms
[debug]   Load.apply: structureIndex took 80.5744ms
[debug]   Load.apply: mkStreams took 1.8834ms
[info] loading global plugins from C:\Users\giancarlo.scattolin\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1932.0427ms
[debug]           Load.loadUnit: plugins took 29.7801ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank\project
[debug]             Load.loadUnit: mkEval took 5.2632ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4908 ms
[info] loading settings for project hackerrank-build from idea2.sbt ...
[debug]               Load.resolveProject(hackerrank-build) took 1.952ms
[debug]             Load.loadTransitive: finalizeProject(Project(id hackerrank-build, base: C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank\project, plugins: List(<none>))) took 3.839ms
[debug] [Loading] Done in C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank\project, returning: (hackerrank-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 110.6994ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.4732ms
[debug]         Load.loadUnit(file:/C:/Users/giancarlo.scattolin/projects/private/scala/HackerRank/project/, ...) took 146.4313ms
[debug]       Load.apply: load took 147.481ms
[debug]       Load.apply: resolveProjects took 0.0951ms
[debug]       Load.apply: finalTransforms took 6.5325ms
[debug]       Load.apply: config.delegates took 0.3379ms
[debug]       Load.apply: Def.make(settings)... took 66.8922ms
[debug]       Load.apply: structureIndex took 22.8077ms
[debug]       Load.apply: mkStreams took 0.0019ms
[info] loading project definition from C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 527.1727ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank
[debug]       Load.loadUnit: mkEval took 0.3167ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.216 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 21.9436ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank, plugins: List(<none>))) took 25.4561ms
[debug] [Loading] Done in C:\Users\giancarlo.scattolin\projects\private\scala\HackerRank, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 100.6551ms
[debug]     Load.loadUnit: cleanEvalClasses took 18.4934ms
[debug]   Load.loadUnit(file:/C:/Users/giancarlo.scattolin/projects/private/scala/HackerRank/, ...) took 646.9697ms
[debug] Load.apply: load took 648.4159ms
[debug] Load.apply: resolveProjects took 0.0753ms
[debug] Load.apply: finalTransforms took 16.582ms
[debug] Load.apply: config.delegates took 0.2256ms
[debug] Load.apply: Def.make(settings)... took 60.058ms
[debug] Load.apply: structureIndex took 22.1136ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to HackerRank (in build file:/C:/Users/giancarlo.scattolin/projects/private/scala/HackerRank/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53736 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53736, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to HackerRank (in build file:/C:/Users/giancarlo.scattolin/projects/private/scala/HackerRank/)
[debug] > Exec(idea-shell, None, None)
